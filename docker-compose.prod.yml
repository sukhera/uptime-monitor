version: '3.9'

services:
  nginx:
    image: nginx:1.24-alpine
    container_name: status-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - ./web/dist:/usr/share/nginx/html:ro
    depends_on:
      api:
        condition: service_healthy
    networks:
      - status-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:6.0
    container_name: status-mongo-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: status_page
    volumes:
      - mongo_prod_data:/data/db
      - ./backups:/backups
    command: mongod --auth
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ismaster')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - status-network
    # Remove port exposure for security
    ports: []

  status-checker:
    build:
      context: .
      dockerfile: configs/docker/Dockerfile.status-checker
    container_name: status-checker-prod
    environment:
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/status_page?authSource=admin
      GO_ENV: production
      RETENTION_DAYS: ${RETENTION_DAYS:-90}
      WEBHOOK_URL: ${WEBHOOK_URL}
      ALERT_THRESHOLD_CPU: ${ALERT_THRESHOLD_CPU:-80}
      ALERT_THRESHOLD_MEM: ${ALERT_THRESHOLD_MEM:-85}
      ALERT_THRESHOLD_DISK: ${ALERT_THRESHOLD_DISK:-90}
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: configs/docker/Dockerfile.api
    container_name: status-api-prod
    environment:
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/status_page?authSource=admin
      PORT: ${PORT:-8080}
      GO_ENV: production
      JWT_SECRET: ${JWT_SECRET}
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - status-network
    depends_on:
      mongo:
        condition: service_healthy
    # Remove port exposure - access through nginx
    ports: []

  web:
    build:
      context: ./web/react-status-page
      dockerfile: Dockerfile
      args:
        VITE_API_URL: /api
        NODE_ENV: production
    container_name: status-web-prod
    restart: unless-stopped
    networks:
      - status-network
    # Remove port exposure - access through nginx
    ports: []

  backup:
    image: mongo:6.0
    container_name: status-backup-prod
    environment:
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/status_page?authSource=admin
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts:ro
    networks:
      - status-network
    command: /scripts/backup-cron.sh
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy

networks:
  status-network:
    driver: bridge

volumes:
  mongo_prod_data:
    driver: local