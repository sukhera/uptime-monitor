name: Security Scanning

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ main, develop ]
    paths:
      - '**/.github/workflows/security.yml'
      - '**/go.mod'
      - '**/go.sum'
      - '**/package.json'
      - '**/package-lock.json'
      - '**/Dockerfile*'
      - '**/docker-compose*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/.github/workflows/security.yml'
      - '**/go.mod'
      - '**/go.sum'
      - '**/package.json'
      - '**/package-lock.json'
      - '**/Dockerfile*'
      - '**/docker-compose*.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Set up Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Build Go project (for CodeQL)
      if: matrix.language == 'go'
      run: |
        go mod download
        go build ./...

    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/react-status-page/package-lock.json

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd web/react-status-page
        npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Go Security Scanning
  go-security-scan:
    name: Go Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Download Go modules
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck -json ./... > govulncheck-results.json || true

    - name: Upload govulncheck results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: govulncheck-results
        path: govulncheck-results.json

  # Node.js Security Scanning
  node-security-scan:
    name: Node.js Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/react-status-page/package-lock.json

    - name: Install dependencies
      run: |
        cd web/react-status-page
        npm ci

    - name: Run npm audit
      run: |
        cd web/react-status-page
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Generate npm audit report
      run: |
        cd web/react-status-page
        npm audit --json > npm-audit-results.json || true

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: web/react-status-page/npm-audit-results.json

  # Docker Security Scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./configs/docker/Dockerfile.api
        tags: uptime-monitor-api:security-scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Status Checker Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./configs/docker/Dockerfile.status-checker
        tags: uptime-monitor-checker:security-scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./web/react-status-page
        file: ./web/react-status-page/Dockerfile
        tags: uptime-monitor-frontend:security-scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'uptime-monitor-api:security-scan'
        format: 'sarif'
        output: 'trivy-api-results.sarif'

    - name: Run Trivy vulnerability scanner on Checker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'uptime-monitor-checker:security-scan'
        format: 'sarif'
        output: 'trivy-checker-results.sarif'

    - name: Run Trivy vulnerability scanner on Frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'uptime-monitor-frontend:security-scan'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-api-results.sarif

    - name: Upload Trivy Checker scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-checker-results.sarif

    - name: Upload Trivy Frontend scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-frontend-results.sarif

  # Container Image Security Scan with Snyk
  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Skip Snyk on PRs to avoid rate limits
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
      if: env.SNYK_TOKEN != ''
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk to check for Go vulnerabilities
      run: snyk test --file=go.mod --severity-threshold=medium
      continue-on-error: true
      if: env.SNYK_TOKEN != ''
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk to check for Node.js vulnerabilities
      run: |
        cd web/react-status-page
        snyk test --file=package.json --severity-threshold=medium
      continue-on-error: true
      if: env.SNYK_TOKEN != ''
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Dependency License Check
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check Go licenses
      run: |
        go-licenses csv ./... > go-licenses.csv
        echo "Go dependencies licenses:"
        cat go-licenses.csv

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/react-status-page/package-lock.json

    - name: Install license checker
      run: npm install -g license-checker

    - name: Check Node.js licenses
      run: |
        cd web/react-status-page
        npm ci
        license-checker --csv > ../node-licenses.csv
        echo "Node.js dependencies licenses:"
        cat ../node-licenses.csv

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          go-licenses.csv
          node-licenses.csv

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, go-security-scan, node-security-scan, docker-security-scan, secret-scan, license-check]
    if: always()
    
    steps:
    - name: Generate Security Summary
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Go Security Scan: ${{ needs.go-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js Security Scan: ${{ needs.node-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "3. Update dependencies as needed" >> $GITHUB_STEP_SUMMARY
        echo "4. Review and approve license compliance" >> $GITHUB_STEP_SUMMARY

    - name: Check overall security status
      run: |
        if [[ "${{ needs.codeql-analysis.result }}" == "failure" || 
              "${{ needs.go-security-scan.result }}" == "failure" || 
              "${{ needs.docker-security-scan.result }}" == "failure" || 
              "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "❌ Security scan found critical issues"
          exit 1
        else
          echo "✅ Security scans completed successfully"
        fi